"""Generates multiple speech files from text in mp3, using open AI API.

Maps the generate speech function to the speech API jobs. The generate 
speech function makes the call to the API, and saves the resposne to an 
mp3 file. The text for the request is extracted from a CSV file which is 
created from the text generation script.

Typical usage example:

    # Initialize the job.
    speech_job = SpeechJob(
        script_csv_file="scripts.csv",
        output_dir="audio_dir"
    )

    # Run the job.
    generate_raw_audio_files(speech_job)
"""


from types import MappingProxyType
import pandas as pd
import random
# from icecream import ic
from generate_youtube_videos.configs import OPEN_AI_CLIENT
from generate_youtube_videos.configs import GPT_VOICES
from dataclasses import dataclass
from typing import Iterable
from typing import Callable
from typing import Tuple
import httpx
from functools import partial
from audio.helpers import first_order_function
from audio.helpers import higher_order_function


@dataclass(frozen=True)
class SpeechJob:
    script_csv_file: str
    output_dir: str


@dataclass(frozen=True)
class SpeechApiData:
    model: str
    voice: str
    input: str
    inference_id: str
    speech_job: SpeechJob


# TODO: move to more general helpers file.
def raise_type_error(value, desired_type):
    if not isinstance(value, desired_type):
        raise TypeError(f"The voices parameter must be a {desired_type}.")


# TODO: move to more general helpers file.
def raise_null_error(value, name):
    if not value:
        raise ValueError(f"{name} is empty or null.")


@first_order_function
def _pick_random_voice(voices: tuple = GPT_VOICES) -> str:
    """Picks random voice option from openAI voices."""
    print(type(GPT_VOICES))
    raise_type_error(voices, tuple)
    raise_null_error(voices, "voices")
    return random.sample(voices, 1)[0]


@first_order_function
def _get_script_and_id_tuples_from_csv(
        job: SpeechJob) -> Tuple[Tuple[str, str], ...]:
    """Gets the video 'scripts' generated by LLM stored in a csv."""
    rows = pd.read_csv(job.script_csv_file).iterrows()
    return tuple((row["VIDEO_SCRIPT"], row["INFERENCE_ID"]) for _, row in rows)


# TODO: Move to a general helpers file.
@higher_order_function
def _create_partial_function(function: Callable, *args, **kwargs) -> Callable:
    """Returns a function with multiple parameters held constant."""
    return partial(function, *args, **kwargs)


# TODO: Move to a general helpers file.
@first_order_function
def _map_with_multiple_args(function: Callable, iter: Iterable) -> tuple:
    """Applies a function with multiple args to each value in an 
    iterable."""
    return tuple(map(lambda args: function(*args), iter))


@first_order_function
def _call_open_ai_tts_api(job: SpeechApiData) -> httpx.Response:
    """Calls open AI API to generate speech, using job dataclass."""
    tts_response = OPEN_AI_CLIENT.audio.speech.create(
        model=job.model,
        voice=job.voice,
        input=job.input
    )
    return tts_response


@first_order_function
def _save_open_ai_tts_api_response_to_mp3(
        job: SpeechApiData, api_response: httpx.Response) -> str:
    """Saves speech audio data from api response to mp3 file."""
    file_path = f"{job.speech_job.output_dir}/{job.inference_id}.mp3"
    api_response.stream_to_file(file_path)
    return file_path


@higher_order_function
def _create_open_ai_api_tts_job(
        job: SpeechJob,
        video_script: str,
        inference_id: str,
        pick_voice: Callable = _pick_random_voice) -> SpeechApiData:
    """Creates an API job dataclass, which is used to call OpenAI API.
    """
    job = SpeechApiData(
        model="tts-1",
        voice=pick_voice(),
        input=video_script,
        inference_id=inference_id,
        speech_job=job
    )
    return job


@higher_order_function
def _create_open_ai_api_tts_jobs(
        job: SpeechJob,
        get_scripts: Callable = _get_script_and_id_tuples_from_csv,
        partial: Callable = _create_partial_function,
        create_api_job: Callable = _create_open_ai_api_tts_job,
        map_function: Callable = _map_with_multiple_args,
        pick_voice: Callable = _pick_random_voice) -> tuple:
    """Creates a tuple of API jobs, to generate audio from OpenAI API.
    """
    create_job_partial = partial(
        create_api_job,
        job,
        pick_voice=pick_voice
    )
    return map_function(create_job_partial, get_scripts(job))


@higher_order_function
def _run_open_ai_api_tts_job_and_save_to_mp3(
        job: SpeechApiData,
        save_to_file: Callable = _save_open_ai_tts_api_response_to_mp3,
        call_api: Callable = _call_open_ai_tts_api) -> str:
    """Calls speech api, and saves response to file as mp3."""
    return save_to_file(job, call_api(job))


# Using an immutable dictionary to keep data frozen.
GENERATE_AUDIO_FUNCTIONS = MappingProxyType(
    {
        "GET_SCRIPTS": _get_script_and_id_tuples_from_csv,
        "CREATE_API_JOB": _create_open_ai_api_tts_job,
        "PARTIAL_FUNCTION": _create_partial_function,
        "PICK_VOICE": _pick_random_voice,
        "GENERATE_SPEECH": _run_open_ai_api_tts_job_and_save_to_mp3,
        "CREATE_API_JOBS": _create_open_ai_api_tts_jobs,
        "MAP_FUNCTION": _map_with_multiple_args,
        "SAVE_SPEECH_TO_FILE": _save_open_ai_tts_api_response_to_mp3,
        "CALL_API": _call_open_ai_tts_api
    }
)


@higher_order_function
def _compose_generate_speech(
        functions: MappingProxyType = GENERATE_AUDIO_FUNCTIONS) -> partial:
    """Composes the generate speech partial functio."""
    partial_func: partial = functions["PARTIAL_FUNCTION"](
        functions["GENERATE_SPEECH"],
        save_to_file=functions["SAVE_SPEECH_TO_FILE"],
        call_api=functions["CALL_API"]
    )
    return partial_func


@higher_order_function
def _compose_create_api_jobs(
        functions: MappingProxyType = GENERATE_AUDIO_FUNCTIONS) -> partial:
    """Composes the create api jobs partial function."""
    partial_func: partial = functions["PARTIAL_FUNCTION"](
        functions["CREATE_API_JOBS"],
        get_scripts=functions["GET_SCRIPTS"],
        partial=functions["PARTIAL_FUNCTION"],
        create_api_job=functions["CREATE_API_JOB"],
        map_function=functions["MAP_FUNCTION"],
        pick_voice=functions["PICK_VOICE"]
    )
    return partial_func


@higher_order_function
def generate_raw_audio_files(
        job: SpeechJob,
        generate_speech_func: Callable = _compose_generate_speech,
        create_api_jobs_func: Callable = _compose_create_api_jobs) -> str:
    """Generates speech from the text in csv. Saves audio to output dir.

    Maps the generate speech function to the speech API jobs. The 
    generate speech function makes the call to the API, and saves the 
    resposne to an mp3 file. The text for the request is extracted from 
    a CSV file which is created from the text generation script.

    Args:
        job (SpeechJob): An instance of SpeechJob containing the csv and 
        the output dir.
        generate_speech_func (Callable): A function which calls OpenAI 
        TTS API, and saves result to mp3 file. 
        create_api_jobs_func (Callable): A function which creates all 
        the API request job dataclass objects.

    Returns:
        A string representing the output directory where audio files are 
        saved.

    Raises:
        None
    """
    tuple(map(generate_speech_func(), create_api_jobs_func()(job)))
    return job.output_dir


def main():
    # speech_job = SpeechJob(
    #     script_csv_file="scripts.csv",
    #     output_dir="audio_dir"
    # )

    # generate_raw_audio_files(speech_job)
    pass


if __name__ == "__main__":
    main()
