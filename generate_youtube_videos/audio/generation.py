"""
1. Seperate out all functions which do not call other functions.
2. Define a bundle of those modularized functions.
3. Define any other functions which are composed of muliple functions
after the bundle.
"""

import pandas as pd
import random
from icecream import ic
from generate_youtube_videos.configs import OPEN_AI_CLIENT
from generate_youtube_videos.configs import GPT_VOICES
from dataclasses import dataclass
from typing import Iterable
from typing import Callable
# from typing import NamedTuple
import httpx
from functools import partial
from audio.helpers import log_data
from audio.helpers import first_order_function
from audio.helpers import higher_order_function
# from collections import namedtuple


@dataclass(frozen=True)
class SpeechJob:
    script_csv_file: str
    output_dir: str


@dataclass(frozen=True)
class SpeechApiData:
    model: str
    voice: str
    input: str
    inference_id: str  # Instead of holdin
    speech_job: SpeechJob


# ------------------------------------------------------------------------------
# FIRST ORDER FUNCTIONS


@first_order_function
def pick_random_voice(voices: list = GPT_VOICES) -> str:
    """Picks random voice option from openAI voices."""
    return random.sample(voices, 1)[0]


@first_order_function
def get_scripts(job: SpeechJob) -> tuple:
    """Gets the video 'scripts' generated by LLM. Scripts are organized in
    tuple pairs by (VIDEO_SCRIPT, INFERENCE_ID)"""
    rows = pd.read_csv(job.script_csv_file).iterrows()
    return tuple((row["VIDEO_SCRIPT"], row["INFERENCE_ID"]) for _, row in rows)


@first_order_function
def create_partial_function(function: Callable, *args, **kwargs) -> Callable:
    """A partial function, creates a function with multiple parameters held 
    constant."""
    return partial(function, *args, **kwargs)


@first_order_function
def map_with_multiple_args(function: Callable, iter: Iterable) -> tuple:
    """Maps a function with multiple args to an iteratble."""
    return tuple(map(lambda args: function(*args), iter))


@first_order_function
def call_api(job: SpeechApiData) -> httpx.Response:
    """Calls open AI API to generate speech, using job dataclass."""
    tts_response = OPEN_AI_CLIENT.audio.speech.create(
        model=job.model,
        voice=job.voice,
        input=job.input
    )
    return tts_response


@first_order_function
def save_speech_to_file(
        job: SpeechApiData, api_response: httpx.Response) -> str:
    """Saves speech audio data to file."""
    file_path = f"{job.speech_job.output_dir}/{job.inference_id}.mp3"
    api_response.stream_to_file(file_path)
    return file_path


# ------------------------------------------------------------------------------
# HIGHER ORDER ORDER FUNCTIONS


@higher_order_function
def create_api_job(
        job: SpeechJob,
        video_script: str,
        inference_id: str,
        pick_random_voice: Callable = pick_random_voice) -> SpeechApiData:
    """Creates an API job dataclass, which is used to call OpenAI API."""
    job = SpeechApiData(
        model="tts-1",
        voice=pick_random_voice(),
        input=video_script,
        inference_id=inference_id,
        speech_job=job
    )
    return job


@higher_order_function
def create_api_jobs(
        job: SpeechJob,
        get_scripts: Callable = get_scripts,
        create_partial_function: Callable = create_partial_function,
        create_api_job: Callable = create_api_job,
        map_with_multiple_args: Callable = map_with_multiple_args,
        pick_random_voice: Callable = pick_random_voice) -> tuple:
    """Creates a tuple of API jobs, to generate audio from OpenAI API."""
    create_job_partial = create_partial_function(
        create_api_job,
        job,
        pick_random_voice=pick_random_voice
    )
    return map_with_multiple_args(create_job_partial, get_scripts(job))


@higher_order_function
def generate_speech(
        job: SpeechApiData,
        save_to_file: Callable = save_speech_to_file,
        call_api: Callable = call_api) -> str:
    """Calls speech api, and saves response to file as mp3."""
    return save_to_file(job, call_api(job))


@higher_order_function
def generate_raw_audio_files(
        job: SpeechApiData,
        get_scripts: Callable = get_scripts,
        create_api_job: Callable = create_api_job,
        map_with_multiple_args: Callable = map_with_multiple_args,
        pick_random_voice: Callable = pick_random_voice,
        generate_speech: Callable = generate_speech,
        create_api_jobs: Callable = create_api_jobs,
        create_partial_function: Callable = create_partial_function,
        save_speech_to_file: Callable = save_speech_to_file,
        call_api: Callable = call_api) -> str:
    """Generates raw speech from the text in scripts csv. Saves their audio
    to output dir. Starts by creating a speech job, and then runs API jobs based
    on the speech job."""

    # Leaving job parameter open, freezing the rest.
    partial_generate_speech_func = create_partial_function(
        generate_speech,
        save_to_file=save_speech_to_file,
        call_api=call_api
    )

    # Leaving job parameter open, freezing the rest.
    partial_create_api_jobs = create_partial_function(
        create_api_jobs,
        get_scripts=get_scripts,
        create_partial_function=create_partial_function,
        create_api_job=create_api_job,
        map_with_multiple_args=map_with_multiple_args,
        pick_random_voice=pick_random_voice
    )

    # Applies speech generation to all API jobs in the iterable.
    tuple(map(partial_generate_speech_func, partial_create_api_jobs(job)))
    return job.output_dir


def main():
    ic(tuple(map(create_api_job, get_scripts())))


if __name__ == "__main__":
    main()
