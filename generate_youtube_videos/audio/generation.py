import pandas as pd
import random
from icecream import ic
from generate_youtube_videos.configs import OPEN_AI_CLIENT
from generate_youtube_videos.configs import GPT_VOICES
from dataclasses import dataclass
from typing import Iterable
from typing import Callable
import httpx
from functools import partial
from generate_youtube_videos.decorators import debug_log_decorator


@dataclass(frozen=True)
class SpeechJob:
    script_csv_file: str
    output_dir: str


@dataclass(frozen=True)
class SpeechApiData:
    model: str
    voice: str
    input: str
    inference_id: str
    speech_job: SpeechJob


@debug_log_decorator
def pick_random_voice() -> str:
    """Picks random voice option from openAI voices."""
    return random.sample(GPT_VOICES, 1)[0]


@debug_log_decorator
def get_scripts(job: SpeechJob) -> tuple:
    """Gets the video 'scripts' generated by LLM. Scripts are organized in 
    tuple pairs by (VIDEO_SCRIPT, INFERENCE_ID)"""
    rows = pd.read_csv(job.script_csv_file).iterrows()
    return tuple((row["VIDEO_SCRIPT"], row["INFERENCE_ID"]) for _, row in rows)


@debug_log_decorator
def create_partial_function(function: Callable, parameter_to_hold) -> Callable:
    """A partial function, creates a function with one parameter held constant, 
    when mapping."""
    return partial(function, parameter_to_hold)


@debug_log_decorator
def map_with_multiple_args(function: Callable, iter: Iterable) -> tuple:
    """Maps a function with multiple args to an iteratble."""
    return tuple(map(lambda args: function(*args), iter))


@debug_log_decorator
def create_api_job(
        job: SpeechJob, video_script: str, inference_id: str) -> SpeechApiData:
    """Creates an API job dataclass, which is used to call OpenAI API."""
    job = SpeechApiData(
        model="tts-1",
        voice=pick_random_voice(),
        input=video_script,
        inference_id=inference_id,
        speech_job=job
    )
    return job


@debug_log_decorator
def create_api_jobs(job: SpeechJob) -> tuple:
    """Creates a tuple of API jobs, to generate audio from OpenAI API."""
    scripts = get_scripts(job)
    # A partial function, allows to hold one parameter constant, when mapping.
    create_job_partial = create_partial_function(create_api_job, job)
    return map_with_multiple_args(create_job_partial, scripts)


@debug_log_decorator
def call_api(job: SpeechApiData) -> httpx.Response:
    """Calls open AI API to generate speech, using job dataclass."""
    tts_response = OPEN_AI_CLIENT.audio.speech.create(
        model=job.model,
        voice=job.voice,
        input=job.input
    )
    # ic(tts_response)
    return tts_response


@debug_log_decorator
def save_speech_to_file(
        job: SpeechApiData, api_response: httpx.Response) -> str:
    """Saves speech audio data to file."""
    file_path = f"{job.speech_job.output_dir}/{job.inference_id}.mp3"
    api_response.stream_to_file(file_path)
    return file_path


@debug_log_decorator
def generate_speech(job: SpeechApiData):
    """Generates speech, saves to file."""
    return save_speech_to_file(job, call_api(job))


@debug_log_decorator
def generate_raw_audio_files(script_csv_file: str, output_dir: str) -> str:
    """Generates raw speech from the text in scripts csv. Saves their audio 
    to output dir. Starts by creating a speech job, and then runs API jobs based
    on the speech job."""
    job = SpeechJob(script_csv_file, output_dir)
    tuple(map(generate_speech, create_api_jobs(job)))
    return job.output_dir


def main():
    ic(tuple(map(create_api_job, get_scripts())))


if __name__ == "__main__":
    main()
